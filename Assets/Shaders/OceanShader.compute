// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeGaussianRandom
#pragma kernel CreateHeightSpectrum
#pragma kernel CreateDisplaceSpectrum
#pragma kernel FFTHorizontal
#pragma kernel FFTHorizontalEnd
#pragma kernel FFTVertical
#pragma kernel FFTVerticalEnd
#pragma kernel TextureGenerationDisplace
#pragma kernel TextureGenerationNormalBubbles

#define PI 3.14159274f
#define G 9.81f

// 数据结构
RWTexture2D<float4> GaussianRandomRT;		//高斯随机数
RWTexture2D<float4> HeightSpectrumRT;		//高度频谱
RWTexture2D<float4> DisplaceXSpectrumRT;	//X偏移频谱
RWTexture2D<float4> DisplaceZSpectrumRT;	//Z偏移频谱
RWTexture2D<float4> InputRT;				//输入
RWTexture2D<float4> OutputRT;				//输出
RWTexture2D<float4> NormalRT;				//法线纹理
RWTexture2D<float4> BubblesRT;				//泡沫纹理
RWTexture2D<float4> DisplaceRT;				//最后生成的偏移纹理

float Lambda;			//偏移影响
float HeightScale;		//高度影响
float BubblesScale;	    //泡沫强度
float BubblesThreshold; //泡沫阈值
float OceanLength;		//海洋长度


// 随机数种子
uint wang_hash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint rngState;           // 随机数

// 计算均匀分布随机数 [0,1)
float rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState / 4294967296.0f;;
}

// 海面大小，即 FFT 纹理大小
int N;

// 计算高斯随机数
float2 gaussian(float2 id)
{
    //均匀分布随机数
    rngState = wang_hash(id.y * N + id.x);
    float x1 = rand_xorshift();
    float x2 = rand_xorshift();
    x1 = max(1e-6f, x1);
    x2 = max(1e-6f, x2);
    
    //  Box-Muller 转换得到两个相互独立的高斯随机数
    float g1 = sqrt(-2.0f * log(x1)) * cos(2.0f * PI * x2);
    float g2 = sqrt(-2.0f * log(x1)) * sin(2.0f * PI * x2);

    return float2(g1, g2);
}

// 计算高斯随机变量
[numthreads(8, 8, 1)]
void ComputeGaussianRandom(uint3 id: SV_DispatchThreadID)
{
    float2 g = gaussian(id.xy);
    GaussianRandomRT[id.xy] = float4(g, 0, 0);
}

float A;				// phillips 谱参数，振幅，影响波浪高度
float4 WindAndSeed;		//风和随机种子 xy为风, zw为两个随机种子

// 计算 phillips 谱
float phillips(float2 k)
{
    // k = (k_x, k_z), k_x = 2\pi n / Lx, k_y = 2\pi m / Lz
    float kLength = length(k);
    kLength = max(0.001f, kLength);
    float kLength2 = kLength * kLength;
    float kLength4 = kLength2 * kLength2;
    // L = V^2 / g
    float windLength = length(WindAndSeed.xy);
    float l = windLength * windLength / G;
    float l2 = l * l;
    float damping = 0.001f;
    float L2 = l2 * damping * damping;
    // phillips谱
    return  A * exp(-1.0f / (kLength2 * l2)) / kLength4 * exp(-kLength2 * L2);
}

// w^2 = gk
float dispersion(float2 k)
{
    return sqrt(G * length(k));
}

// Donelan-Banner方向拓展
float DonelanBannerDirectionalSpreading(float2 k)
{
    // w_p = 0.855g / U
    float omegap = 0.855f * G / length(WindAndSeed.xy);
    // w / w_p
    float ratio = dispersion(k) / omegap;
    // betaS
    float betaS;
    if (ratio < 0.95f)
    {
        betaS = 2.61f * pow(ratio, 1.3f);
    }
    if(ratio >= 0.95f && ratio < 1.6f)
    {
        betaS = 2.28f * pow(ratio, -1.3f);
    }
    if(ratio >= 1.6f)
    {
        float epsilon = -0.4f + 0.8393f * exp(-0.567f * log(ratio * ratio));
        betaS = pow(10, epsilon);
    }
    // theta = arctan(k_y, k_x) - arctan(wind_y, wind_x)
    float theta = atan2(k.y, k.x);
    // D(w, theta) = betaS / 2 tanh(betaS * \pi) sech(\betaS \theta)^2
    return betaS / max(1e-7f, 2.0f * tanh(betaS * PI) * pow(cosh(betaS * theta), 2));
}

// 复数相乘
float2 complexMultiply(float2 c1, float2 c2)
{
    return float2(c1.x * c2.x - c1.y * c2.y, c1.x * c2.y + c1.y * c2.x);
}

float Time;				//时间

//生成高度频谱
[numthreads(8, 8, 1)]
void CreateHeightSpectrum(uint3 id: SV_DispatchThreadID)
{
    // (k_x, k_z) = (2\pi n' / Lx, 2\pi m' / Lz)
    float2 k = float2(2.0f * PI * id.x / N - PI, 2.0f * PI * id.y / N - PI);
    // 获得高斯随机数
    float2 gaussian = GaussianRandomRT[id.xy].xy;
    // h_0
    float2 hTilde0 = gaussian * sqrt(abs(phillips(k) * DonelanBannerDirectionalSpreading(k)) / 2.0f);
    float2 hTilde0Conj = gaussian * sqrt(abs(phillips(-k) * DonelanBannerDirectionalSpreading(-k)) / 2.0f);
    hTilde0Conj.y *= -1.0f;
    // 欧拉公式，e^{ix} = cosx + isinx
    float omegat = dispersion(k) * Time;
    float c = cos(omegat);
    float s = sin(omegat);
    float2 h1 = complexMultiply(hTilde0, float2(c, s));
    float2 h2 = complexMultiply(hTilde0Conj, float2(c, -s));
    // h
    float2 HTilde = h1 + h2;
    // 生成高度频谱
    HeightSpectrumRT[id.xy] = float4(HTilde, 0, 0);
}

// Ns = pow(2, m - 1)
int Ns;

// 横向FFT计算，只针对第 m - 1 阶段，最后一阶段需要特殊处理
[numthreads(8, 8, 1)]
void FFTHorizontal(uint3 id: SV_DispatchThreadID)
{
    // Stockham 计算输入索引，左边 floor(x / 2^m) * 2^{m - 1} + x mod 2^{m - 1}
    int2 idxs = id.xy;
    idxs.x = floor(id.x / (Ns * 2.0f)) * Ns + id.x % Ns;
    // 计算权值 W_N^u = e^{i 2\pi u / N}
    float angle = 2.0f * PI * (id.x / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));
    // 获取输入的高度频谱
    float2 x0 = InputRT[idxs].xy;
    float2 x1 = InputRT[int2(idxs.x + N * 0.5f, idxs.y)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    OutputRT[id.xy] = float4(output, 0, 0);
}

//横向FFT最后阶段计算,需要进行特别处理
[numthreads(8, 8, 1)]
void FFTHorizontalEnd(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.x = floor(id.x / (Ns * 2.0f)) * Ns + id.x % Ns;
    float angle = 2.0f * PI * (id.x / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    /*********修改内容***********/
    w *= -1;
    /***************************/

    float2 x0 = InputRT[idxs].xy;
    float2 x1 = InputRT[int2(idxs.x + N * 0.5f, idxs.y)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    /*********修改内容***********/
    int x = id.x - N * 0.5f;
    output *= ((x + 1) % 2.0f) * 1 + (x % 2.0f) * (-1);
    /***************************/
    OutputRT[id.xy] = float4(output, 0, 0);
}

//纵向FFT计算,只针对第m-1阶段，最后一阶段需要特殊处理
[numthreads(8, 8, 1)]
void FFTVertical(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.y = floor(id.y / (Ns * 2.0f)) * Ns + id.y % Ns;
    float angle = 2.0f * PI * (id.y / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    float2 x0 = InputRT[idxs].xy;
    float2 x1 = InputRT[int2(idxs.x, idxs.y + N * 0.5f)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    OutputRT[id.xy] = float4(output, 0, 0);
}
//纵向FFT最后阶段计算,需要进行特别处理
[numthreads(8, 8, 1)]
void FFTVerticalEnd(uint3 id: SV_DispatchThreadID)
{
    int2 idxs = id.xy;
    idxs.y = floor(id.y / (Ns * 2.0f)) * Ns + id.y % Ns;
    float angle = 2.0f * PI * (id.y / (Ns * 2.0f));
    float2 w = float2(cos(angle), sin(angle));

    /*********修改内容***********/
    w *= -1;
    /***************************/

    float2 x0 = InputRT[idxs].xy;
    float2 x1 = InputRT[int2(idxs.x, idxs.y + N * 0.5f)].xy;

    float2 output = x0 + float2(w.x * x1.x - w.y * x1.y, w.x * x1.y + w.y * x1.x);
    /*********修改内容***********/
    int x = id.y - N * 0.5f;
    output *= ((x + 1) % 2.0f) * 1 + (x % 2.0f) * (-1);
    /***************************/
    OutputRT[id.xy] = float4(output, 0, 0);
}
//生成偏移频谱
[numthreads(8, 8, 1)]
void CreateDisplaceSpectrum(uint3 id: SV_DispatchThreadID)
{
    float2 k = float2(2 * PI * id.x / N - PI, 2 * PI * id.y / N - PI);
    k /= max(0.001f, length(k));
    float2 HTilde = HeightSpectrumRT[id.xy].xy;

    float2 KxHTilde = complexMultiply(float2(0, -k.x), HTilde);
    float2 kzHTilde = complexMultiply(float2(0, -k.y), HTilde);

    DisplaceXSpectrumRT[id.xy] = float4(KxHTilde, 0, 0);
    DisplaceZSpectrumRT[id.xy] = float4(kzHTilde, 0, 0);
}
//生成偏移纹理
[numthreads(8, 8, 1)]
void TextureGenerationDisplace(uint3 id: SV_DispatchThreadID)
{
    float y = length(HeightSpectrumRT[id.xy].xy) / (N * N) * HeightScale;//高度
    float x = length(DisplaceXSpectrumRT[id.xy].xy) / (N * N) * Lambda;//x轴偏移
    float z = length(DisplaceZSpectrumRT[id.xy].xy) / (N * N) * Lambda;//z轴偏移
    
    HeightSpectrumRT[id.xy] = float4(y, y, y, 0);
    DisplaceXSpectrumRT[id.xy] = float4(x, x, x, 0);
    DisplaceZSpectrumRT[id.xy] = float4(z, z, z, 0);
    DisplaceRT[id.xy] = float4(x, y, z, 0);
}

//生成法线和泡沫纹理
[numthreads(8, 8, 1)]
void TextureGenerationNormalBubbles(uint3 id: SV_DispatchThreadID)
{
    //计算法线
    float uintLength = OceanLength / (N - 1.0f);//两点间单位长度
    //获取当前点，周围4个点的uv坐标
    uint2 uvX1 = uint2((id.x - 1.0f + N) % N, id.y);
    uint2 uvX2 = uint2((id.x + 1.0f + N) % N, id.y);
    uint2 uvZ1 = uint2(id.x, (id.y - 1.0f + N) % N);
    uint2 uvZ2 = uint2(id.x, (id.y + 1.0f + N) % N);

    //以当前点为中心，获取周围4个点的偏移值
    float3 x1D = DisplaceRT[uvX1].xyz;//在x轴 第一个点的偏移值
    float3 x2D = DisplaceRT[uvX2].xyz;//在x轴 第二个点的偏移值
    float3 z1D = DisplaceRT[uvZ1].xyz;//在z轴 第一个点的偏移值
    float3 z2D = DisplaceRT[uvZ2].xyz;//在z轴 第二个点的偏移值

    //以当前点为原点，构建周围4个点的坐标
    float3 x1 = float3(x1D.x - uintLength, x1D.yz);//在x轴 第一个点的坐标
    float3 x2 = float3(x2D.x + uintLength, x2D.yz);//在x轴 第二个点的坐标
    float3 z1 = float3(z1D.xy, z1D.z - uintLength);//在z轴 第一个点的坐标
    float3 z2 = float3(z1D.xy, z1D.z + uintLength);//在z轴 第二个点的坐标

    //计算两个切向量
    float3 tangentX = x2 - x1;
    float3 tangentZ = z2 - z1;

    //计算法线
    float3 normal = normalize(cross(tangentZ, tangentX));


    //计算泡沫
    float3 ddx = x2D - x1D;
    float3 ddz = z2D - z1D;
    //雅可比行列式
    float jacobian = (1.0f + ddx.x) * (1.0f + ddz.z) - ddx.z * ddz.x;

    jacobian = saturate(max(0, BubblesThreshold - saturate(jacobian)) * BubblesScale);

    NormalRT[id.xy] = float4(normal, 0);
    BubblesRT[id.xy] = float4(jacobian, jacobian, jacobian, 0);
}