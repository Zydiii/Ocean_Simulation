// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Gray
#pragma kernel Fib

Texture2D inputTexture;
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> outputTexture;

struct MyInt
{
    int val;
    int index;
};

RWStructuredBuffer<MyInt> buffer;

[numthreads(8,8,1)]
void Gray (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float r = inputTexture[id.xy].r;
    float g = inputTexture[id.xy].g;
    float b = inputTexture[id.xy].b;
    float res = r * 0.299 + g * 0.587 + b * 0.114;
    
    outputTexture[id.xy] = float4(res, res, res, 1.0);
}

int fibonnaci(int n)
{
    int a = 0, b = 1, res = 0;
    for(int i = 0; i < n; i++)
    {
        res = a + b;
        a = b;
        b = res;
    }
    return a;
}

[numthreads(32, 1, 1)]
void Fib (uint3 id : SV_DispatchThreadID)
{
    buffer[id.x].val = fibonnaci(id.x);
    buffer[id.x].index = id.x;
}

